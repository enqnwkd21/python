
### 09월 30일
# 데이터 언어 => numpy, pandas module

# 배열(array)
# - 다차원(2차원일 경우 matrix 형태)
# - 동일한 데이터 타입만 허용

import numpy as np

# 1. 생성
a1 = np.array([1,2,3,4,5])
a2 = np.array([[1,2,3],[4,5,6]])
a3 = np.array([[[1,2,3],[4,5,6]], [[7,8,9],[10,11,12]]])

a4 = np.arange(1,26).reshape(5,5)
np.arange(1,13).reshape(2,2,3)          

# 차원 진행 방향
# in R
# 행 열 층 

# in python
# 층 행 열

# 차원 번호
# in R
# 2차원 : 행(1) 열(2)
# 3차원 : 행(1) 열(2) 층(3) 

# in python
# 2차원 : 행(0) 열(1)
# 3차원 : 층(0) 행(1) 열(2)

type(a1)



# 09월 30일
# numpy(array)
import numpy as np

# 1. 생성
emp = np.array(my_func.f_read_txt('emp.csv'))

# 2. 색인
emp[0,0]
emp[:,1]      # 두번째 컬럼 전체 행 출력
emp[2:5,1]    # 두번째 컬럼 일부 행 선택

emp[:,[1,3]]  # 리스트를 사용항 다수 선택 가능

emp[emp[:,2] == 'SALESMAN', :]    # boolean indexing 가능

arr1 = np.arange(1,31).reshape(6,5)
arr1[[2,3,5],[1,3,4]]             # point indexing => p(2,1), p(3,3), p(5,4)
                                  # point indexing : 행과 열을 모두 리스트로 색인 시도 시
                                  
arr1[[2,3,5],:][:,[1,3,4]]        # 순차적으로 각각 행과 열을 색인
arr1[np.ix_([2,3,5],[1,3,4])]     # R에서처럼 범위 인덱스로 해석을 도와주는 np.ix_ 사용

# [ 연습 문제 ]
arr1 = np.arange(10,260,10).reshape(5,5)
arr1

# 1) 두 번째, 네 번째 컬럼 선택
arr1[:, [1,3]]

# 2) 140,150,190,200 선택
arr1[[2,3],[3,4]]         # point indexing 발생 => p(2,3), p(3,4)

arr1[[2,3], :][:,[3,4]]
arr1[:,[3,4]][[2,3], :]

arr1[np.ix_([2,3],[3,4])]

arr1[2:4, 3:5]            # slice indexing은 point indexing 발생 X

# 3) 70,90,100,220,240,250 선택
arr1[[1,4],:][:,[1,3,4]]
arr1[np.ix_([1,4],[1,3,4])]

arr1[2:4, 3:5]

# [ 참고 : np.ix_ 인수 전달 형식 ]
# np.ix_ 는 리스트의 동시 전달 목적으로 사용
# 따라서 리스트가 아닌 형태로는 전달 불가

arr1[np.ix_(2, [3,4])]      # 정수 전달 불가
arr1[np.ix_([2], [3,4])]    # 상수를 리스트로 전달하면 가능

arr1[np.ix_(2:4, [3,4])]    # 슬라이스 전달 불가
arr1[np.ix_([2,3], [3,4])]  # 슬라이스를 리스트로 변경해서 전달 가능

# 4) 80, 250 선택
arr1[[1,4],[2,4]]

# 5) 두번째 컬럼의 값이 100이상인 행의 두번째, 네번째 컬럼 출력
arr1[arr1[:,1] >= 100, [1,3]]             # 불가(조건 결과가 리스트이므로)
arr1[arr1[:,1] >= 100, :][:, [1,3]]       # 가능
arr1[np.ix_(arr1[:,1] >= 100, [1,3])]     # 가능


# 3차원 색인
arr2 = np.arange(1,25).reshape(2,3,4)
arr2[0,0,0]
arr2[:,0,0]        # 모든층, 첫번째 행, 첫번째 컬럼(차원축소발생)
arr2[:,0:1,0:1]    # 모든층, 첫번째 행, 첫번째 컬럼(차원축소발생X)

# [ 연습 문제 - 3차원 배열의 색인 ]
arr1 = np.arange(1,61).reshape(3,4,5) 
# 1) 7
arr1[0,1,1]
arr1[0:1,1:2,1:2]

# 2) 27,28,32,33
arr1[1, 1:3, 1:3]      # 2차원
arr1[1:2, 1:3, 1:3]    # 3차원

arr1[1, [1,2], [1,2]]                      # point indexing
arr1[1:2, :, :][:, [1,2], :][:, :, [1,2]]  # 분리 색인(차원 축소 방지)
arr1[1, :, :][[1,2], :][:,[1,2]]           # 분리 색인(층 선택 과정에서 차원 축소 발생 => 행과 열 색인은 2차원!)

arr1[np.ix_([1], [1,2], [1,2])]

# 3) 46,49,50,56,59,60
arr1[2, [1,3], [0,3,4]]                    # point indexing으로 해석 => miss match 발생

arr1[2, :, :][[1,3], :][:, [0,3,4]]        # point indexing으로 해석 => miss match 발생
arr1[np.ix_([2], [1,3], [0,3,4])]    

# 4) 8,18,10,20,28,38,30,40
arr1[0:2, [1,3], [2,4]]                        # point indexing
arr1[0:2, :, :][:, [1,3], :][:, :, [2,4]]     
arr1[0:2, [1,3], :][:, :, [2,4]]   

arr1[np.ix_([0,1], [1,3], [2,4])]


# 3. 메서드
arr1 = np.arange(1,26).reshape(5,5)
dir(np)      # numpy의 함수 목록
dir(arr1)    # array 객체에 전달 가능한 메서드

arr1.dtype   # 데이터타입
arr1.shape   # 크기

arr1.shape[0]   # 행 크기
arr1.shape[1]   # 컬럼 개수

arr1.reshape(5,-1)               # -1은 알아서 나머지를 계산해서 모양 결정
arr1.reshape(1,25)               # 
arr1.reshape(1,25).flatten()     # 평탄화

arr1.ndim                        # 차원 크기

# 4. 연산
arr1 = np.arange(1,10).reshape(3,3)
arr2 = np.arange(10,100,10).reshape(3,3)
arr3 = np.arange(10,130,10).reshape(4,3)

arr1 + 1
arr1[arr1 > 5]

arr1 + arr2       # 동일한 크기를 갖는 배열끼리 연산 가능
arr1 + arr3       # 다른 크기를 갖는 배열끼리 원칙적으로 연산 불가

arr4 = np.array([10,20,30])
arr1 + arr4       # broadcast 기능(각 행별로 arr4 연산 반복)

# broadcast 기능이란
# 기본적으로 크기가 서로 다른 배열끼리는 연산 불가,
# 반복이 가능한 경우 자동 반복을 수행해주는 기능(단, 조건 존재)

# <broadcast 조건>
# 1. 더 작은 객체의 행과 열중 1의 크기를 갖음
# 2. 더 작은 객체의 크기중 1이 아닌 크기를 더 큰 객체가 갖음
# 3. 양쪽 동일한 크기가 같은 방향이어야 함

# 4X3 1X4 => 4X3 4X1

a1 = np.arange(1,13).reshape(4,3)
a2 = np.array([10,20,30,40]).reshape(1,4)

a1 + a2                 # 불가
a1 + a2.reshape(4,1)    # 불가

# 5. 형 변환 메서드
float(a1)    # 에러(스칼라만 가능)

# for문
outlist = []
for i in a1 : 
    inlist = []
    for j in i :
        inlist.append(float(j))
    outlist.append(inlist)
np.array(outlist)

# astype 메서드
a1.astype('float')
a1.astype('str')

# [ 연습 문제 - 배열 색인, 연산 ]
# 1. 2부터 시작하는 짝수로 구성된 4X4 배열 생성
# 2. 위 배열에 배열의 첫 번째 행을 더한 값 출력
# 3. 위 배열에 배열의 첫 번째 컬럼을 더한 값 출력


# 7. 산술 연산 메서드
import numpy as np

a1 = np.arange(1,21).reshape(5,4)

a1.sum()
a1.min()
a1.max()
a1.var()
a1.std()
a1.mean()

a1.sum()           # 전체 총합
a1.sum(axis=0)     # 행별(서로 다른 행끼리, 같은 컬럼) 총합 => 세로 방향 연산
a1.sum(axis=1)     # 컬럼별(서로 컬럼 행끼리, 같은 행 내) 총합 => 가로 방향 연산

a1.cumsum()        # 누적합
a1.cumsum(axis=0)
a1.cumprod(axis=0)
 
a2 = np.arange(1,61).reshape(3,4,5)
a2.sum(0)
 
a1.argmin()         # 최솟값을 갖는 위치 리턴(whichmin, in R)
a1.argmax()         # 최댓값을 갖는 위치 리턴(whichmax, in R)

a1.argmin()         # 최솟값을 갖는 위치 리턴(whichmin, in R)
a1.argmax()         # 최댓값을 갖는 위치 리턴(whichmax, in R)

a1.argmin(axis=0)   # 세로방향으로 묶어서 그 중 최소값을 갖는 위치
a1.argmax(axis=0)   # 세로방향으로 묶어서 그 중 최소값을 갖는 위치

(a1 > 5).sum()      # 조건에 맞는 개수 확인
(a1 >= 1).all()     # 전체가 모두 조건에 맞을 경우 True
(a1 > 10).any()     # 하나라도 조건에 맞을 경우 True


# 참고 : numpy에서의 var, pandas의 var
from pandas import Series, DataFrame

a1[0,:].var()             # 1.25
((1 - 2.5)**2 + (2 - 2.5)**2 + (3 - 2.5)**2 + (4 - 2.5)**2) / 4

s1 = Series(a1[0,:])
s1.var()                  # 1.67
((1 - 2.5)**2 + (2 - 2.5)**2 + (3 - 2.5)**2 + (4 - 2.5)**2) / (4-1)

s1.var?    # ddof=1   => 편차제곱합 / n - ddof
s1.var(ddof=0)


# [ 연습 문제 ]
# 1. 다음의 구조를 갖는 array를 생성하자. 
# 1   500     5  
# 2   200     2  
# 3   200     7  
# 4    50     9 

a1 = np.array([[1,500,5],[2,200,2],[3,200,7],[4,50,9]])

# 1) 위 배열에서 두 번째 컬럼 값이 300 이상인 행을 선택
a1[a1[:,1] >= 300, :]

# 2) 세 번째 컬럼 값이 최대인 행을 선택
a1[a1[:,2].argmax(), :]

a1[a1[:,2] == a1[:,2].max(), :]

# 2. 1부터 시작하는 3X4의 배열을 생성한 후
a2 = np.arange(1,13).reshape(3,4)

# 1) 각 행별 분산 연산(axis=0)
a2.var(axis=0)

a2.mean(axis=0)             # 평균
a2 - a2.mean(axis=0)        # 편차, 3X4 - 1X4 연산 가능
(a2 - a2.mean(axis=0))**2   # 편차 제곱

((a2 - a2.mean(axis=0))**2).sum(axis=0) / 3

# 2) 각 컬럼별 분산 연산(axis=1) 
a2.var(axis=1)

a2.mean(axis=1)                          # 평균
a2 - a2.mean(axis=1)                     # 편차, 3X4 - 1X3 연산 불가
a2 - a2.mean(axis=1).reshape(3,1)        # 편차, 3X4 - 3X1 연산 가능

(a2 - a2.mean(axis=1).reshape(3,1))**2                     # 편차 제곱
((a2 - a2.mean(axis=1).reshape(3,1))**2).sum(axis=1)       # 편차 제곱 합

((a2 - a2.mean(axis=1).reshape(3,1))**2).sum(axis=1) / 4   # 분산


# 8. 정렬(array에서의 정렬의 의미가 없음)
a1.sort(axis = 0)      # 즉시 수정

# 9. 전치 메서드
a2.T
a2.swapaxes(0,1)    # 서로 바꿀 두 축 번호 전달
a2.swapaxes(1,0)    # 행과 열 전치(전달 순서 중요 X)

a2.transpose(0,1)   # 행 방향에 0(행) 배치, 열 방향에 1(열) 배치 => 원본
a2.transpose(1,0)   # 행 방향에 1(열) 배치, 열 방향에 0(행) 배치 => 행,열 전치(전달 순서 중요)

a3.transpose(0,2,1) # 3차원일 경우 행,열 전치

# 10. 파일 입출력
# 1) 외부 파일 불러오기
np.loadtxt(fname,
           dtype = 'float',   # 데이터 타입
           comments = '#',    # 주석처리 라인 skip
           delimiter = ,      # 필드 구분자(분리 구분 기호)
           skiprows = 0,      # 스킵할 행의 수
           usecols = ,        # 특정 컬럼만 불러올때(컬럼 번호)
           encoding = )       # 인코딩 옵션

np.loadtxt('file1.txt', delimiter = ',', dtype = 'int', usecols=[0,1], skiprows=1)

# 2) 외부 파일로 쓰기
np.savetxt(fname,            # 파일명
           X,                # 객체명
           fmt = '%.18e',
           delimiter = ' ' )

np.savetxt('a2.txt', a2, fmt = '%d')

# =============================================================================
