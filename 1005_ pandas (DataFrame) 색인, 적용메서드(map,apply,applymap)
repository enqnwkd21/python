
# pandas
# 1. Series
# - 1차원
# - key - value 구조(key : index number/name)
# - DataFrame 요소

s1 = Series([1,2,3,4], index = ['a','b','c','d'])
s1.a        # key 색인(key indexing)

# 2. DataFrame
# - 2차원(행과 열의 구조)
# - key - value 구조(key : column number/name)
df1 = DataFrame(np.arange(1,10).reshape(3,3),index = ['a','b','c'], columns = ['A','B','C'])

df1.A       # key 색인은 컬럼 인덱싱을 의미
df1.a       # key 색인으로는 인덱스 색인 불가

# 1. 생성
DataFrame(np.arange(1,10).reshape(3,3),           # 대상
          index = ['a','b','c'],                  # index 이름 
          columns = ['A','B','C'])                # column 이름

df1 = DataFrame({'a':[1,2,3,4],'b':[10,20,30,40]})      # dict 전달, dict key => DataFrame의 컬럼


df1.a        # key indexing
df1['a']     # key indexing

# 2. 색인
# 색인 메서드 .ix(지금은 불가능)
# 1) .iloc(positional indexing) : 위치 기반

# 2) .loc(label indexing) : 이름 기반(조건 색인 포함)

df1.iloc[0,0]         # 숫자 전달 가능
df1.iloc[0,'a']       # 이름 전달 불가

df1.loc[0,'a']        # 이름 전달 가능(여기서 0은 index 위치이기도 하지만 이름이기도 함)

df2 = DataFrame({'a':[1,2,3,4],'b':[10,20,30,40]}, index = ['A','B','C','D']) 
df2
 
df2.loc[0,'a']        # KeyError : 0이라고 하는 행 이름은 X 
df2.loc['A','a']
df2.iloc[0,0] 


df2[df2['a'] > 3,:]              # 조건을 사용한 색인 처리 불가
df2.iloc[df2['a'] > 3,:]         # 조건을 사용한 색인 iloc로는 불가
df2.iloc[np.array(df2['a']>3),:] # boolean값을 array로 바꾸면 iloc로 처리 가능

df2.loc[df2['a'] > 3,1]          # 조건을 사용한 색인 loc로 처리 가능(위치 기반 함께 전달 불가)
df2.loc[df2['a'] > 3,'b']        # loc처리시 나머지도 이름 색인으로 전달

df2.iloc[0:3,:]                  # 숫자 슬라이스 색인 가능(3 position 포함 X)
df2.loc['B':'D',:]               # 문자 슬라이스 색인 가능(D position 포함 O)
df2.iloc[[0,1,2],[0,1]]          # 리스트 색인 가능

# 3. 기본 메서드
df1.dtypes         # in oracle(desc), in R(str)
df1.index          # 행 이름
df1.columns        # 컬럼 이름 출력   
df1.values         # data만 출력

# 4. 외부 파일 불러오기
pd.read_csv('student.csv')        # 한글 깨짐
std = pd.read_csv('student.csv', encoding = 'cp949')        
std.dtypes 

# 5. 적용 메서드(fetch를 도와주는 메서드)
# 대상.map(함수) 
# 1) map 메서드 : 시리즈(1차원) 적용 가능, 원소별 적용 -> 대상.map(함수) 추가 인수 전달 X
# 2) apply 메서드 : 데이터프레임(2차원) 적용 가능, 행별 열별 적용 -> 추가 인수 전달 O
# 3) applymap 메서드 : 데이터프레임(2차원)만 적용 가능, 원소별 적용 -> 추가 인수 전달 X

# 예제) emp에서 각 SAL별로 등급 부여
# 1000 미만 : C, 1000 이상 3000 미만 : B, 3000 이상 : A
emp = pd.read_csv('emp.csv')
emp['GRADE'] = np.where(emp['SAL'] < 1000 ,'C', np.where(emp['SAL'] < 3000 ,'B', 'A'))

def f_grade(x) :
    if x < 1000 :
        return 'C'
    elif x < 3000 :
        return 'B'
    else :
        return 'A'          # return은 1번
    
def f_grade(x) :
    if x < 1000 :
        vgrade = 'C'
    elif x < 3000 :
        vgrade = 'B'
    else :
        vgrade = 'A' 
    return vgrade

f_grade(3100)           # 스칼라 전달 가능
f_grade(emp['SAL'])     # 여러개 전달 불가(if문 때문)

emp['SAL'].map(f_grade) # R의 sapply와 유사 : emp['SAL']의 원소별 함수 적용
## emp['SAL'] 은 1차원 => map 사용

# 예제2)
df1 = DataFrame(np.arange(1,13).reshape(4,3))
df1.sum(axis = 1)


df1.apply(sum, axis =1)

# 예제3) 소수점 둘째자리로 표현
f1 = lambda x : '%.2f' % x

df1.applymap(f1)
df1.apply(f1)        # TypeError: cannot convert the series([1,2,3]) to <class 'float'>

emp['DEPTNO'].replace(10,'인사부')
emp['JOB'].startswith('C')   # AttributeError: 'Series' object has no attribute 'startswith'
                             # 스칼라에만 적용 가능
emp['JOB'].map(lambda x : x.startswith('A')) 

#==============================================================================
# R과 Python의 적용 함수 비교
# R의 적용 함수(sapply, apply는 함수가 필요로 하는 추가 인수를 전달 할 수 있음)
card = pd.read_csv('card_history.csv', encoding = 'cp949')

# 따라서 아래처럼 함수명만 전달, 함수가 필요로 하는 추가 인자를 뒤에 나열할 수 있고
apply(card, c(1,2), str_replace_all, ',','')

# 또는 아래처럼 사용자 정의 함수로 묶어서 아예 함수와 인수를 동시에 전달하게 만들고
# apply로는 함수명 하나만 전달 할 수도 있음
f1 <- function(x){
    str_replace_all(x,',','')
    }

apply(card, c(1,2), str_replace_all)
#==============================================================================
# 파이썬 적용 메서드(map, apply, applymap)는 apply만 적용할 함수의 추가 인수를 전달할 수 있고
# map과 applymap은 추가 인수를 전달할 수가 없으므로
# map과 applymap 사용 시, 아래와 같이 사용자 정의 함수로 묶어서 
# 함수가 필요로 하는 인수를 모두 써 놓은 뒤에 적용시켜야 함

card = card.iloc[:,1:] 
card.applymap(replace,',','')             # 추가 인수 전달 불가
f1 = lambda x : x.replace(',','')
card.applymap(f1)


# [ 연습 문제 ]
pro = pd.read_csv('professor.csv', encoding = 'cp949')
# 1) 박원범과 허은 교수의 이름, pay, 이메일 주소 출력
pro.loc[(pro['NAME'] == '박원범')|(pro['NAME'] == '허은'), ['NAME','PAY','EMAIL']]

# 2) 각 교수의 이메일 아이디를 EMAIL_ID라는 컬럼에 추가
def f_split(x) :
    return(x.split('@')[0])

pro['EMAIL_ID'] = pro['EMAIL'].map(f_split)

pro.loc[:,['ID','EMAIL_ID']]

# 3) 홈페이지 주소가 없는 교수의 경우 아래와 같은 이름으로 수정 
#     http://www.itwill.com/email_id

np.where(pro['HPAGE'].isnull(),'http://www.itwill.com/' + pro['EMAIL_ID'],pro['HPAGE'])
pd.isnull(pro['HPAGE'])      # 가능
pro['HPAGE'].isnull()        # 가능


f2 = lambda x, y : 'http://www.itwill.com/' + y if pd.isnull(x) else x
pro['HPAGE'].map(f2,pro['EMAIL_ID'])               # 불가


list(map(f2,pro['HPAGE'],pro['EMAIL_ID']))         # 가능


# 4) ID에서 특수기호 제외 
pro['ID'].replace('-','')        # 문자열 replace로 해석X, pandas replace(값 치환) 
                                 # 문자열 replace(문자열의 일부 치환), pandas replace(값 치환) 따로 있음

f2 = lambda x : x.replace('-','')
pro['ID'].map(f2)                                 



# 5) 입사년도를 추출하여 HIRE_YEAR 컬럼 추가
def f_date(x):
    return(int(x[0:4]))               # astype은 문자열에 적용 불가

pro['HIRE_YEAR'] = pro['HIREDATE'].map(f_date)


# 6) 이름이 김으로 시작하는 사람의 이름, PAY, 학과번호 출력
vbool = pro['NAME'].map(lambda x : x.startswith('김'))
pro.loc[vbool, ['NAME','PAY','DEPTNO']]



# [ 참고 - NA 확인 ]
np.isnan(1)            # 하나의 숫자 전달 가능
np.isnan([1,2,3])      # 여러 숫자 전달 가능
np.isnan('1')          # 문자 스칼라 전달 불가

#--메서드(호출)(스칼라 불가능, 시리즈 & 데이터프레임만 호출 가능)
pd.isnull()
Series([1,2,3]).isnull()
Series(['1','2','3']).isnull()
3.isnull()        # 스칼라 불가능 , 반드시 시리즈 & 데이터프레임만 호출 가능
'3'.isnull()      # 스칼라 불가능 , 반드시 시리즈 & 데이터프레임만 호출 가능

#--함수(다 가능)
pd.isnull(3)
pd.isnull('3')
pd.isnull(['1','2','3'])


# [ 참고 - DataFrame 적용 메서드]
# map 함수
# list(map(lambda x : ~~~))일 경우
# - 동시에 여러 대상 fetch 가능
# - 함수가 필요로 하는 추가 옵션 전달 가능


# map 메서드(호출)
# - 동시에 여러 대상 fetch 불가(오로지 하나의 대상만 fetch 가능)
# - 함수가 필요로 하는 추가 옵션 전달 불가

Series([1,2,3,4]).map(sum, axis = 1)             # 추가 인수(함수 옵션) 전달 불가
Series([1,2,3,4]).map(sum, Series([1,2,3,4]))    # 추가 fetch 대상 전달 불가


# apply 메서드
# - 동시에 여러 대상 fetch 불가(오로지 하나의 대상만 fetch 가능)
# - 함수가 필요로 하는 추가 옵션 전달 가능


# [ 참고 - replace의 두가지 의미 전달 방법 ]
'1,200'.replace(',','')                        # 문자열 replace(패턴 치환)
Series('1,200').replace(',','')                # 값 치환: ,랑 완전히 똑같이 생긴 애를 치환 해
Series(['1,200',',','1,300']).replace(',','')  # ,는 빈 문자열 1,200과 1,300만 출력
Series('1,200').replace('1,200','')            # 1200을 아예 없애기 
